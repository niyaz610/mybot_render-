import asyncio
from datetime import datetime, time as dtime
import pytz
from flask import Flask
import threading
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "8368039960:AAHAzUhtYMd0nLLVx4Fk23dh5oLcazySWKU"
TZ = pytz.timezone("Asia/Yekaterinburg")
ADMINS = [1293474567]
OWNER_ID = 1188715935

# --- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_message_count = {}
processed_albums = set()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_working_day():
    return datetime.now(TZ).weekday() < 5  # –ø–Ω-–ø—Ç


def is_privileged_user(user_id):
    return user_id == OWNER_ID or user_id in ADMINS


def get_user_count(chat_id, user_id):
    return user_message_count.get(chat_id, {}).get(user_id, 0)


def increment_user_count(chat_id, user_id):
    if chat_id not in user_message_count:
        user_message_count[chat_id] = {}
    user_message_count[chat_id][user_id] = user_message_count[chat_id].get(
        user_id, 0) + 1
    return user_message_count[chat_id][user_id]


async def delete_message_after_delay(context, chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id,
                                         message_id=message_id)
    except:
        pass


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    now = datetime.now(TZ).time()
    weekday = datetime.now(TZ).weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    # --- –ü–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    if getattr(update.message, "paid_media", None):
        return

    # --- –ê–ª—å–±–æ–º—ã ---
    media_group_id = update.message.media_group_id
    if media_group_id:
        if (chat_id, media_group_id) in processed_albums:
            return
        processed_albums.add((chat_id, media_group_id))

    # --- –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
    if is_privileged_user(user_id):
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è ---
    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ü—Ç –ø–æ—Å–ª–µ 22:00, –°–±, –í—Å, –ü–Ω –¥–æ 10:00 ‚Äî –Ω–µ —É–¥–∞–ª—è–µ–º
    if (weekday == 4 and now >= dtime(22, 0)) or \
       (weekday in (5, 6)) or \
       (weekday == 0 and now < dtime(10, 0)):
        return

    # --- –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã ---
    messages_today = get_user_count(chat_id, user_id)
    if messages_today >= 4:
        try:
            await update.message.delete()
        except:
            pass
        return

    current_count = increment_user_count(chat_id, user_id)

    # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    try:
        if current_count == 1:
            text, delay = "üìù –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –µ—â—ë 3 —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è", 10
        elif current_count == 2:
            text, delay = "üìù –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –µ—â—ë 2 —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è", 10
        elif current_count == 3:
            text, delay = "‚ö†Ô∏è –í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å", 20
        elif current_count == 4:
            text, delay = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è! –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.", 30
        else:
            return

        bot_message = await context.bot.send_message(chat_id=chat_id,
                                                     text=text)
        asyncio.create_task(
            delete_message_after_delay(context, chat_id,
                                       bot_message.message_id, delay))
    except:
        pass


# --- –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ ---
async def reset_users(context: ContextTypes.DEFAULT_TYPE):
    global user_message_count, processed_albums
    user_message_count = {}
    processed_albums = set()


# --- –£—Ç—Ä–µ–Ω–Ω–µ–µ –∏ –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def morning_msg(context: ContextTypes.DEFAULT_TYPE):
    text = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º! –î–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –£–¥–∞—á–Ω–æ–≥–æ –í–∞–º –¥–Ω—è!"
    await context.bot.send_message(chat_id=CHAT_ID, text=text)


async def night_msg(context: ContextTypes.DEFAULT_TYPE):
    text = "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏! –ù–æ—á—å—é —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏."
    await context.bot.send_message(chat_id=CHAT_ID, text=text)


# --- Flask –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ---
web_app = Flask('')


@web_app.route('/')
def home():
    return f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: {datetime.now(TZ).strftime('%H:%M:%S')}"


@web_app.route('/health')
def health():
    working = is_working_day() and dtime(
        5, 0) <= datetime.now(TZ).time() <= dtime(21, 0)
    return {
        "status": "ok",
        "users_today": sum(len(u) for u in user_message_count.values()),
        "working_now": working,
        "is_working_day": is_working_day()
    }


def run_web():
    web_app.run(host='0.0.0.0', port=8080, debug=False)


threading.Thread(target=run_web, daemon=True).start()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

# –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ —É—Ç—Ä–æ–º
app.job_queue.run_daily(reset_users, dtime(hour=9, minute=59, tzinfo=TZ))
# –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
app.job_queue.run_daily(morning_msg, dtime(hour=10, minute=0, tzinfo=TZ))
# –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
app.job_queue.run_daily(night_msg, dtime(hour=22, minute=0, tzinfo=TZ))

app.run_polling()
